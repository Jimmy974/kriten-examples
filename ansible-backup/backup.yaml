---
- name: Read extra_vars
  hosts: localhost
  gather_facts: no
  vars:
    - input_vars: "{{ lookup('ansible.builtin.env', 'EXTRA_VARS')}}"

  tasks:

    - name: Reading target hosts from input vars and storing as localhost fact
      set_fact:
         target_hosts: "{{ input_vars['target_hosts'] }}"

- name: Network Configs Backup
  hosts: "{{ hostvars['localhost']['target_hosts'] }}"
  connection: network_cli
  gather_facts: no
  vars:
    - ansible_user: "{{ lookup('ansible.builtin.file', '/etc/secret/network_username')}}"
    - ansible_password: "{{ lookup('ansible.builtin.file', '/etc/secret/network_password')}}"
    - input_vars: "{{ lookup('ansible.builtin.env', 'EXTRA_VARS')}}"

  tasks:

    - name: Cisco NXOS Backup
      nxos_config:
        backup: yes
        backup_options:
          dir_path: "/tmp/network_backup/nxos/{{ inventory_hostname }}/"
          filename: "{{ inventory_hostname }}.cfg"
      when: ansible_network_os == "nxos"

    - name: Cisco NXOS remove timestamp from config
      lineinfile:
        path: "/tmp/network_backup/nxos/{{ inventory_hostname }}/{{ inventory_hostname }}.cfg"
        state: absent
        regexp: '^!Time'
      when: ansible_network_os == "nxos"

    - name: Cisco IOS Backup
      ios_config:
        backup: yes
        backup_options:
          dir_path: "/tmp/network_backup/ios/{{ inventory_hostname }}/"
          filename: "{{ inventory_hostname }}.cfg"
      when: ansible_network_os == "ios"

    - name: Arista Backup
      eos_config:
        backup: yes
        backup_options:
          dir_path: "/tmp/network_backup/eos/{{ inventory_hostname }}/"
          filename: "{{ inventory_hostname }}.cfg"
      when: ansible_network_os == "eos"

    - name: Cisco ASA Backup
      asa_config:
        backup: yes
        backup_options:
          dir_path: "/tmp/network_backup/asa/{{ inventory_hostname }}/"
          filename: "{{ inventory_hostname }}.cfg"
      when: ansible_network_os == "asa"

